{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockWETH.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nexport const useStakeTokens = tokenAddress => {\n  _s();\n\n  //approve\n  //address\n  //abi\n  //chainid\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); //stake tokens\n\n  const {\n    send: approveERC20Send,\n    state: approveAndStakeErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  });\n\n  const approveAndStake = amount => {\n    setAmountToStake(amount);\n    return approveERC20Send(tokenFarmAddress, amount);\n  };\n\n  const {\n    send: stakeSend,\n    state: stakeState\n  } = useContractFunction(tokenFarmContract, \"stakeTokens\", {\n    transactionName: \"Stake Tokens\"\n  });\n  const [amountToStake, setAmountToStake] = useState(\"0\");\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      stakeSend(amountToStake, tokenAddress);\n    }\n  }, [approveAndStakeErc20State, amountToStake, tokenAddress]);\n  return {\n    approveAndStake,\n    approveAndStakeErc20State\n  };\n};\n\n_s(useStakeTokens, \"+3aJ2/hULHE07YaJRzbYV9OciNA=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["C:/Users/Josef Peterson/Projects/demos/defi-stake-yield-brownie/front_end/src/hooks/useStakeTokens.ts"],"names":["useEffect","useState","useContractFunction","useEthers","constants","utils","TokenFarm","ERC20","networkMapping","Contract","useStakeTokens","tokenAddress","chainId","abi","tokenFarmAddress","String","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveERC20Send","state","approveAndStakeErc20State","transactionName","approveAndStake","amount","setAmountToStake","stakeSend","stakeState","amountToStake","status"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,mBAAT,EAA8BC,SAA9B,QAA+C,eAA/C;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,uCAAlB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAA0B;AAAA;;AACpD;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcT,SAAS,EAA7B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAUP,SAAhB;AACA,QAAMQ,gBAAgB,GAAGF,OAAO,GAAGJ,cAAc,CAACO,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,WAAhC,EAA6C,CAA7C,CAAH,GAAqDR,SAAS,CAACY,WAA/F;AACA,QAAMC,kBAAkB,GAAG,IAAIZ,KAAK,CAACa,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIV,QAAJ,CAAaK,gBAAb,EAA+BG,kBAA/B,CAA1B;AAEA,QAAMG,QAAQ,GAAGb,KAAK,CAACM,GAAvB;AACA,QAAMQ,cAAc,GAAG,IAAIhB,KAAK,CAACa,SAAV,CAAoBE,QAApB,CAAvB;AACA,QAAME,aAAa,GAAG,IAAIb,QAAJ,CAAaE,YAAb,EAA2BU,cAA3B,CAAtB,CAboD,CAepD;;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MAA+DxB,mBAAmB,CAACoB,aAAD,EAAgB,SAAhB,EAA2B;AAAEK,IAAAA,eAAe,EAAE;AAAnB,GAA3B,CAAxF;;AACA,QAAMC,eAAe,GAAIC,MAAD,IAAoB;AACxCC,IAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACA,WAAOL,gBAAgB,CAACV,gBAAD,EAAmBe,MAAnB,CAAvB;AACH,GAHD;;AAIA,QAAM;AAAEN,IAAAA,IAAI,EAAEQ,SAAR;AAAmBN,IAAAA,KAAK,EAAEO;AAA1B,MAAyC9B,mBAAmB,CAACiB,iBAAD,EAAoB,aAApB,EAAmC;AAAEQ,IAAAA,eAAe,EAAE;AAAnB,GAAnC,CAAlE;AAEA,QAAM,CAACM,aAAD,EAAgBH,gBAAhB,IAAoC7B,QAAQ,CAAC,GAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,yBAAyB,CAACQ,MAA1B,KAAqC,SAAzC,EAAoD;AAChDH,MAAAA,SAAS,CAACE,aAAD,EAAgBtB,YAAhB,CAAT;AACH;AACJ,GAJQ,EAIN,CAACe,yBAAD,EAA4BO,aAA5B,EAA2CtB,YAA3C,CAJM,CAAT;AAMA,SAAO;AAAEiB,IAAAA,eAAF;AAAmBF,IAAAA;AAAnB,GAAP;AAEH,CAjCM;;GAAMhB,c;UAKWP,S,EAWiDD,mB,EAKtBA,mB","sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\r\nimport { constants, utils } from \"ethers\"\r\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\r\nimport ERC20 from \"../chain-info/contracts/MockWETH.json\"\r\nimport networkMapping from \"../chain-info/deployments/map.json\"\r\nimport { Contract } from \"@ethersproject/contracts\"\r\n\r\nexport const useStakeTokens = (tokenAddress: string) => {\r\n    //approve\r\n    //address\r\n    //abi\r\n    //chainid\r\n    const { chainId } = useEthers()\r\n    const { abi } = TokenFarm\r\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\r\n    const tokenFarmInterface = new utils.Interface(abi)\r\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\r\n\r\n    const erc20ABI = ERC20.abi\r\n    const erc20Interface = new utils.Interface(erc20ABI)\r\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\r\n\r\n    //stake tokens\r\n    const { send: approveERC20Send, state: approveAndStakeErc20State } = useContractFunction(erc20Contract, \"approve\", { transactionName: \"Approve ERC20 transfer\" })\r\n    const approveAndStake = (amount: string) => {\r\n        setAmountToStake(amount)\r\n        return approveERC20Send(tokenFarmAddress, amount)\r\n    }\r\n    const { send: stakeSend, state: stakeState } = useContractFunction(tokenFarmContract, \"stakeTokens\", { transactionName: \"Stake Tokens\" })\r\n\r\n    const [amountToStake, setAmountToStake] = useState(\"0\")\r\n\r\n    useEffect(() => {\r\n        if (approveAndStakeErc20State.status === \"Success\") {\r\n            stakeSend(amountToStake, tokenAddress)\r\n        }\r\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\r\n\r\n    return { approveAndStake, approveAndStakeErc20State }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}