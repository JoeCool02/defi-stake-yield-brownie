{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josef Peterson\\\\Projects\\\\demos\\\\defi-stake-yield-brownie\\\\front_end\\\\src\\\\components\\\\yourWallet\\\\StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Input } from \"@material-ui/core\";\nimport { useStakeTokens } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const {\n    notifications\n  } = useNotifications();\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndStake,\n    approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  useEffect(() => {\n    if (notifications.filter(notifications => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Approve ERC20 transfer\").length > 0) {\n      console.log(\"Approved!\");\n    }\n\n    if (notifications.filter(notifications => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked\");\n    }\n  }, [notifications]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleStakeSubmit,\n      color: \"primary\",\n      size: \"large\",\n      children: \"Stake!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StakeForm, \"wq2+bEd945VguKTnvfGzTPx3Mt4=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["C:/Users/Josef Peterson/Projects/demos/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx"],"names":["React","useEffect","useState","useEthers","useTokenBalance","useNotifications","formatUnits","Button","Input","useStakeTokens","utils","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","notifications","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndStake","approveAndStakeErc20State","handleStakeSubmit","amountAsWei","parseEther","toString","isMining","status","filter","type","transactionName","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,gBAArC,QAA6D,eAA7D;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;;AAOA,OAAO,MAAMC,SAAS,GAAG,QAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA;AAAF,GAA8B;AACpD,QAAM;AAAEC,IAAAA,OAAO,EAAEC,YAAX;AAAyBC,IAAAA;AAAzB,MAAkCH,KAAxC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,YAAY,GAAGb,eAAe,CAACU,YAAD,EAAeE,OAAf,CAApC;AACA,QAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACb,WAAW,CAACW,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAoBf,gBAAgB,EAA1C;AAEA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAA2C,CAA3C,CAApC;;AACA,QAAMqB,iBAAiB,GAAIC,KAAD,IAAgD;AACtE,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,KAAuB,EAAvB,GAA4B,EAA5B,GAAiCC,MAAM,CAACJ,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAzD;AACAL,IAAAA,SAAS,CAACG,SAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACH,GAJD;;AAMA,QAAM;AAAEM,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAiDvB,cAAc,CAACK,YAAD,CAArE;;AACA,QAAMmB,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,WAAW,GAAGxB,KAAK,CAACyB,UAAN,CAAiBd,MAAM,CAACe,QAAP,EAAjB,CAApB;AACA,WAAOL,eAAe,CAACG,WAAW,CAACE,QAAZ,EAAD,CAAtB;AACH,GAHD;;AAKA,QAAMC,QAAQ,GAAGL,yBAAyB,CAACM,MAA1B,KAAqC,QAAtD;AAEArC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImB,aAAa,CAACmB,MAAd,CAAsBnB,aAAD,IAAmBA,aAAa,CAACoB,IAAd,KAAuB,oBAAvB,IAA+CpB,aAAa,CAACqB,eAAd,KAAkC,wBAAzH,EAAmJC,MAAnJ,GAA4J,CAAhK,EAAmK;AAC/Jb,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AACD,QAAIV,aAAa,CAACmB,MAAd,CAAsBnB,aAAD,IAAmBA,aAAa,CAACoB,IAAd,KAAuB,oBAAvB,IAA+CpB,aAAa,CAACqB,eAAd,KAAkC,cAAzH,EAAyIC,MAAzI,GAAkJ,CAAtJ,EAAyJ;AAAEb,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAA8B;AAC5L,GALQ,EAKN,CAACV,aAAD,CALM,CAAT;AAOA,sBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAEG;AAAjB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AACI,MAAA,OAAO,EAAEU,iBADb;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,IAAI,EAAC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAxCM;;GAAMtB,S;UAEWR,S,EACCC,e,EAEKC,gB,EAS6BI,c;;;KAd9CE,S","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Token } from \"../Main\"\r\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\r\nimport { formatUnits } from \"@ethersproject/units\"\r\nimport { Button, Input } from \"@material-ui/core\"\r\nimport { useStakeTokens } from \"../../hooks\"\r\nimport { utils } from \"ethers\"\r\n\r\n\r\ninterface StakeFormProps {\r\n    token: Token\r\n}\r\n\r\nexport const StakeForm = ({ token }: StakeFormProps) => {\r\n    const { address: tokenAddress, name } = token\r\n    const { account } = useEthers()\r\n    const tokenBalance = useTokenBalance(tokenAddress, account)\r\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\r\n    const { notifications } = useNotifications()\r\n\r\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\r\n        setAmount(newAmount)\r\n        console.log(newAmount)\r\n    }\r\n\r\n    const { approveAndStake, approveAndStakeErc20State } = useStakeTokens(tokenAddress)\r\n    const handleStakeSubmit = () => {\r\n        const amountAsWei = utils.parseEther(amount.toString())\r\n        return approveAndStake(amountAsWei.toString())\r\n    }\r\n\r\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\r\n\r\n    useEffect(() => {\r\n        if (notifications.filter((notifications) => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Approve ERC20 transfer\").length > 0) {\r\n            console.log(\"Approved!\")\r\n        }\r\n        if (notifications.filter((notifications) => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Stake Tokens\").length > 0) { console.log(\"Tokens Staked\") }\r\n    }, [notifications])\r\n\r\n    return (\r\n        <div>\r\n            <Input onChange={handleInputChange}></Input>\r\n            <Button\r\n                onClick={handleStakeSubmit}\r\n                color=\"primary\"\r\n                size=\"large\">\r\n                Stake!!!\r\n            </Button>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}