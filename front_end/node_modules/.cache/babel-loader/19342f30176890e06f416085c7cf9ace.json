{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josef Peterson\\\\Projects\\\\demos\\\\defi-stake-yield-brownie\\\\front_end\\\\src\\\\components\\\\yourWallet\\\\StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\";\nimport { useStakeTokens } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport Alert from '@material-ui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const {\n    notifications\n  } = useNotifications();\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false);\n  const [showStakeTokenSuccess, setShowStakeTokenSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowErc20ApprovalSuccess(false);\n    setShowStakeTokenSuccess(false);\n  };\n\n  useEffect(() => {\n    if (notifications.filter(notifications => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Approve ERC20 transfer\").length > 0) {\n      console.log(\"Approved!\");\n      setShowErc20ApprovalSuccess(true);\n      setShowStakeTokenSuccess(false);\n    }\n\n    if (notifications.filter(notifications => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked\");\n      setShowErc20ApprovalSuccess(false);\n      setShowStakeTokenSuccess(true);\n    }\n  }, [notifications]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleStakeSubmit,\n        color: \"primary\",\n        size: \"large\",\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 33\n        }, this) : \"Stake!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 token transfer approved! Now approve the 2nd transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokenSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens Staked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"CSGuiqR4YFoVLHJl4xBxGR7hcG0=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["C:/Users/Josef Peterson/Projects/demos/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx"],"names":["React","useEffect","useState","useEthers","useTokenBalance","useNotifications","formatUnits","Button","CircularProgress","Input","Snackbar","useStakeTokens","utils","Alert","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","notifications","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndStake","state","approveAndStakeErc20State","handleStakeSubmit","amountAsWei","parseEther","toString","isMining","status","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokenSuccess","setShowStakeTokenSuccess","handleCloseSnack","filter","type","transactionName","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Token } from \"../Main\"\r\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\r\nimport { formatUnits } from \"@ethersproject/units\"\r\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\"\r\nimport { useStakeTokens } from \"../../hooks\"\r\nimport { utils } from \"ethers\"\r\nimport Alert from '@material-ui/lab'\r\n\r\ninterface StakeFormProps {\r\n    token: Token\r\n}\r\n\r\nexport const StakeForm = ({ token }: StakeFormProps) => {\r\n    const { address: tokenAddress, name } = token\r\n    const { account } = useEthers()\r\n    const tokenBalance = useTokenBalance(tokenAddress, account)\r\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\r\n    const { notifications } = useNotifications()\r\n\r\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\r\n        setAmount(newAmount)\r\n        console.log(newAmount)\r\n    }\r\n\r\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\r\n    const handleStakeSubmit = () => {\r\n        const amountAsWei = utils.parseEther(amount.toString())\r\n        return approveAndStake(amountAsWei.toString())\r\n    }\r\n\r\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\r\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\r\n    const [showStakeTokenSuccess, setShowStakeTokenSuccess] = useState(false)\r\n    const handleCloseSnack = () => {\r\n        setShowErc20ApprovalSuccess(false)\r\n        setShowStakeTokenSuccess(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (notifications.filter((notifications) => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Approve ERC20 transfer\").length > 0) {\r\n            console.log(\"Approved!\")\r\n            setShowErc20ApprovalSuccess(true)\r\n            setShowStakeTokenSuccess(false)\r\n        }\r\n        if (notifications.filter((notifications) => notifications.type === \"transactionSucceed\" && notifications.transactionName === \"Stake Tokens\").length > 0) {\r\n            console.log(\"Tokens Staked\")\r\n\r\n            setShowErc20ApprovalSuccess(false)\r\n            setShowStakeTokenSuccess(true)\r\n        }\r\n    }, [notifications])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Input onChange={handleInputChange}></Input>\r\n                <Button\r\n                    onClick={handleStakeSubmit}\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    disabled={isMining}>\r\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!!!\"}\r\n                </Button>\r\n            </div>\r\n            <Snackbar\r\n                open={showErc20ApprovalSuccess}\r\n                autoHideDuration={5000}\r\n                onClose={handleCloseSnack}>\r\n                <Alert onClose={handleCloseSnack} severity=\"success\">ERC-20 token transfer approved! Now approve the 2nd transaction</Alert>\r\n            </Snackbar>\r\n            <Snackbar\r\n                open={showStakeTokenSuccess}\r\n                autoHideDuration={5000}\r\n                onClose={handleCloseSnack}>\r\n                <Alert onClose={handleCloseSnack} severity=\"success\">Tokens Staked!</Alert>\r\n            </Snackbar>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}